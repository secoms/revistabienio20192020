{"version":3,"sources":["hoc/Layout/Layout.js","App.js","hoc/asyncComponent.js","serviceWorker.js","store/reducers/materias.js","store/reducers/topicos.js","index.js","store/actions/actionsType.js","utils/utility.js"],"names":["Layout","className","classes","content","this","props","children","Component","asyncHome","importComponent","state","component","then","cmp","setState","default","C","asyncComponent","withRouter","path","exact","to","Boolean","window","location","hostname","match","initialSatet","materias","activeMateria","errror","setMaterias","action","updateObject","fetchMateriasFailed","error","setActiveMateria","resetActiveMateria","reducer","type","actionsType","initialState","topicos","activeTopico","setTopicos","fetchErrorTopicos","setActiveTopico","resetActiveTopico","composeEnhancers","compose","rootReducer","combineReducers","materiasReducer","topicosReducer","store","createStore","applyMiddleware","thunk","app","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","SET_TOPICOS","SET_MATERIAS","FETCH_TOPICOS_FAILED","FETCH_MATERIAS_FAILED","SET_ACTIVE_TOPICO","SET_ACTIVE_MATERIA","RESET_ACTIVE_TOPICO","RESET_ACTIVE_MATERIA","oldBject","updatedProperties","smothScroll","target","duration","console","log","querySelector","ease","t","b","c","d","getBoundingClientRect","top","targetPosition","scrollY","startPosition","pageYOffset","distance","startTime","requestAnimationFrame","animation","currentTime","timeElapse","run","scrollTo"],"mappings":"6VAeeA,E,iLAVP,OACI,6BACI,0BAAMC,UAAWC,IAAQC,SACpBC,KAAKC,MAAMC,e,GANXC,aCIfC,ECJiB,SAACC,GACpB,kNACIC,MAAQ,CACJC,UAAW,MAFnB,mFAKyB,IAAD,OAChBF,IACKG,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACH,UAAWE,EAAIE,eAR9C,+BAaQ,IAAMC,EAAIZ,KAAKM,MAAMC,UACrB,OAAOK,EAAI,kBAACA,EAAMZ,KAAKC,OAAW,SAd1C,GAAqBE,aDGPU,EAAe,WAC/B,OAAO,uDAmBMC,mBAbf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,KAAK,IAAIC,OAAK,EAACT,UAAWH,IACjC,kBAAC,IAAD,CAAUa,GAAG,YEPHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kDCfAC,EAAe,CACjBC,SAAU,KACVC,cAAe,KACfC,OAAQ,MAGNC,EAAc,SAACrB,EAAOsB,GACxB,OAAOC,YAAavB,EAAM,CACtBkB,SAAUI,EAAOJ,SAASA,YAG5BM,EAAsB,SAACxB,EAAOsB,GAChC,OAAOC,YAAavB,EAAM,CACtByB,MAAOH,EAAOG,SAGhBC,EAAmB,SAAC1B,EAAOsB,GAC7B,OAAOC,YAAavB,EAAM,CACtBmB,cAAeG,EAAOH,iBAGxBQ,EAAqB,SAAC3B,EAAOsB,GAC/B,OAAOC,YAAavB,EAAM,CACtBmB,cAAc,QAcPS,EAVC,WAAmC,IAAlC5B,EAAiC,uDAAzBiB,EAAcK,EAAW,uCAC9C,OAAQA,EAAOO,MACX,KAAKC,IAA0B,OAAOT,EAAYrB,EAAOsB,GACzD,KAAKQ,IAAmC,OAAON,EAAoBxB,EAAOsB,GAC1E,KAAKQ,IAAgC,OAAOJ,EAAiB1B,EAAOsB,GACpE,KAAKQ,IAAkC,OAAOH,EAAmB3B,GACjE,QAAQ,OAAOA,ICjCjB+B,EAAe,CACjBC,QAAS,KACTC,aAAc,KACdR,MAAO,MAGLS,EAAa,SAAClC,EAAOsB,GACvB,OAAOC,YAAavB,EAAO,CACvBgC,QAAQV,EAAOU,WAIjBG,EAAoB,SAACnC,EAAOsB,GAC9B,OAAOC,YAAavB,EAAO,CACvByB,MAAMH,EAAOG,SAIfW,EAAkB,SAACpC,EAAOsB,GAC5B,OAAOC,YAAavB,EAAO,CACvBiC,aAAaX,EAAOW,gBAItBI,EAAoB,SAACrC,EAAOsB,GAC9B,OAAOC,YAAavB,EAAO,CACvBiC,aAAa,QAgBNL,EAVC,WAAmC,IAAlC5B,EAAiC,uDAAzB+B,EAAcT,EAAW,uCAC9C,OAAQA,EAAOO,MACX,KAAKC,IAAyB,OAAOI,EAAWlC,EAAOsB,GACvD,KAAKQ,IAAkC,OAAOK,EAAkBnC,EAAOsB,GACvE,KAAKQ,IAA+B,OAAOM,EAAgBpC,EAAOsB,GAClE,KAAKQ,IAAiC,OAAOO,EAAkBrC,GAC/D,QAAS,OAAOA,IC5BlBsC,EAAkHC,IAElHC,EAAcC,YAAgB,CAChCvB,SAASwB,EACTV,QAAQW,IAGNC,EAAQC,YAAYL,EAAaF,EACnCQ,YAAgBC,OAGdC,EACF,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,IAAD,CAAeK,SAAS,KACpB,kBAAC,EAAD,QAKZC,IAASC,OAAOH,EAAKI,SAASC,eAAe,SHmGvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,MAAK,SAAAuD,GACjCA,EAAaC,iB,+BIrInB,gRAAO,IAAMC,EAAc,cACdC,EAAe,eAEfC,EAAuB,uBACvBC,EAAwB,wBAExBC,EAAoB,oBACpBC,EAAqB,qBAErBC,EAAsB,sBACtBC,EAAuB,wB,+GCVvB3C,EAAe,SAAC4C,EAAUC,GACnC,OAAO,eACAD,EADP,GAEOC,IAIEC,EAAc,SAACC,EAAQC,GAIhC,GAHAC,QAAQC,IAAI,0BAA2BH,GACvCA,EAASlB,SAASsB,cAAcJ,GAChCE,QAAQC,IAAI,0BAA2BH,GACxB,OAAXA,EAAiB,CAAC,IAkBTK,EAAT,SAAcC,EAAGC,EAAGC,EAAGC,GAEnB,OAAOD,GADPF,GAAKG,GACUH,EAAIC,GAjBvBL,QAAQC,IAAIH,EAAOU,wBAAwBC,KAC3C,IAAMC,EAAiBZ,EAAOU,wBAAwBC,IAAMpE,OAAOsE,QAAU,IACvEC,EAAgBvE,OAAOwE,YACzBC,EAAWJ,EAAiBE,EAC5BG,EAAY,KAgBhBC,uBAbA,SAASC,EAAUC,GACG,OAAdH,IAAoBA,EAAYG,GACpC,IAAIC,EAAaD,EAAcH,EAC3BK,EAAMjB,EAAKgB,EAAYP,EAAeE,EAAUf,GACpD1D,OAAOgF,SAAS,EAAGD,GACfD,EAAapB,GAAUiB,sBAAsBC,U","file":"static/js/main.96f6e808.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport classes from './Layout.module.scss'\nclass Layout extends Component {\n\n    render() {\n        return (\n            <div>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default Layout","import React from 'react';\nimport './App.scss';\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\nimport Layout from './hoc/Layout/Layout';\nimport asyncComponent from \"./hoc/asyncComponent\";\n\nconst asyncHome = asyncComponent(() =>{\n  return import (\"./containers/Home/Home\")\n})\n\n\n// const scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop)   \n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Layout>\n        <Switch>\n          <Route path=\"/\" exact component={asyncHome} />\n          <Redirect to=\"/\"/>\n        </Switch>\n      </Layout>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import React, {Component} from 'react';\n\nconst asyncComponent = (importComponent) => {\n    return class extends Component {\n        state = {\n            component: null\n        }\n\n        componentDidMount() {\n            importComponent()\n                .then(cmp => {\n                    this.setState({component: cmp.default});\n                });\n        }\n\n        render() {\n            const C = this.state.component;\n            return C ? <C {...this.props}/> : null;\n        }\n    }\n};\n\nexport default asyncComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionsType from '../actions/actionsType'\nimport { updateObject } from '../../utils/utility'\n\nconst initialSatet = {\n    materias: null,\n    activeMateria: null,\n    errror: null,\n}\n\nconst setMaterias = (state, action) => {\n    return updateObject(state,{\n        materias: action.materias.materias\n    })\n}\nconst fetchMateriasFailed = (state, action) => {\n    return updateObject(state,{\n        error: action.error\n    })\n}\nconst setActiveMateria = (state, action) => {\n    return updateObject(state,{\n        activeMateria: action.activeMateria\n    })\n}\nconst resetActiveMateria = (state, action) => {\n    return updateObject(state,{\n        activeMateria:null\n    })\n}\n\nconst reducer = (state = initialSatet, action) => {\n    switch (action.type) {\n        case actionsType.SET_MATERIAS: return setMaterias(state, action)\n        case actionsType.FETCH_MATERIAS_FAILED: return fetchMateriasFailed(state, action)\n        case actionsType.SET_ACTIVE_MATERIA: return setActiveMateria(state, action)\n        case actionsType.RESET_ACTIVE_MATERIA: return resetActiveMateria(state, action)\n        default:return state\n    }\n\n}\nexport default reducer","import * as actionsType from '../actions/actionsType'\nimport { updateObject } from '../../utils/utility'\n\nconst initialState = {\n    topicos: null, \n    activeTopico: null,\n    error: null,\n}\n\nconst setTopicos = (state, action) => {\n    return updateObject(state, {\n        topicos:action.topicos\n    })\n}\n\nconst fetchErrorTopicos = (state, action) => {\n    return updateObject(state, {\n        error:action.error\n    })\n}\n\nconst setActiveTopico = (state, action) => {\n    return updateObject(state, {\n        activeTopico:action.activeTopico\n    })\n}\n\nconst resetActiveTopico = (state, action) => {\n    return updateObject(state, {\n        activeTopico:null\n    })\n}\n\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionsType.SET_TOPICOS: return setTopicos(state, action )\n        case actionsType.FETCH_TOPICOS_FAILED: return fetchErrorTopicos(state, action )\n        case actionsType.SET_ACTIVE_TOPICO: return setActiveTopico(state, action )\n        case actionsType.RESET_ACTIVE_TOPICO: return resetActiveTopico(state, action )\n        default: return state\n    }\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport materiasReducer from \"./store/reducers/materias\";\nimport topicosReducer from \"./store/reducers/topicos\";\n\nconst composeEnhancers = process.env.NODE_ENV === \"development\" ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose\n\nconst rootReducer = combineReducers({\n    materias:materiasReducer,\n    topicos:topicosReducer,\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n))\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename=\"/\">\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const SET_TOPICOS = \"SET_TOPICOS\"\nexport const SET_MATERIAS = \"SET_MATERIAS\"\n\nexport const FETCH_TOPICOS_FAILED = \"FETCH_TOPICOS_FAILED\"\nexport const FETCH_MATERIAS_FAILED = \"FETCH_MATERIAS_FAILED\"\n\nexport const SET_ACTIVE_TOPICO = \"SET_ACTIVE_TOPICO\"\nexport const SET_ACTIVE_MATERIA = \"SET_ACTIVE_MATERIA\"\n\nexport const RESET_ACTIVE_TOPICO = \"RESET_ACTIVE_TOPICO\"\nexport const RESET_ACTIVE_MATERIA = \"RESET_ACTIVE_MATERIA\"\n\nexport const REST_TOPIC = \"REST_TOPIC\"","export const updateObject = (oldBject, updatedProperties) => {\n    return {\n        ...oldBject,\n        ...updatedProperties\n    }\n}\n\nexport const smothScroll = (target, duration) => {\n    console.log(\"smothScroll -> target: \", target);\n    target = document.querySelector(target)\n    console.log(\"smothScroll -> target: \", target);\n    if (target !== null) {\n\n        // const targetPosition = target.getBoundingClientReact().top\n        console.log(target.getBoundingClientRect().top)\n        const targetPosition = target.getBoundingClientRect().top + window.scrollY + 500;\n        const startPosition = window.pageYOffset\n        let distance = targetPosition - startPosition\n        let startTime = null\n\n\n        function animation(currentTime) {\n            if (startTime === null) startTime = currentTime\n            var timeElapse = currentTime - startTime\n            var run = ease(timeElapse, startPosition, distance, duration)\n            window.scrollTo(0, run)\n            if (timeElapse < duration) requestAnimationFrame(animation)\n        }\n\n        function ease(t, b, c, d) {\n            t /= d;\n            return c * t * t + b;\n        }\n\n        requestAnimationFrame(animation)\n    }\n}\n"],"sourceRoot":""}